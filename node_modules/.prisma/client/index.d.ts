
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/index';
declare const prisma: unique symbol
export type PrismaPromise<A> = Promise<A> & {[prisma]: true}
type UnwrapPromise<P extends any> = P extends Promise<infer R> ? R : P
type UnwrapTuple<Tuple extends readonly unknown[]> = {
  [K in keyof Tuple]: K extends `${number}` ? Tuple[K] extends PrismaPromise<infer X> ? X : UnwrapPromise<Tuple[K]> : UnwrapPromise<Tuple[K]>
};


/**
 * Model User
 * 
 */
export type User = {
  id: number
  name: string
  email: string | null
  phone: number | null
  profile: string | null
  createdAt: Date
  updatedAt: Date
}

/**
 * Model Tweet
 * 
 */
export type Tweet = {
  id: number
  userId: number
  contents: string
  photo: string | null
  viewCount: number
}

/**
 * Model Liked
 * 
 */
export type Liked = {
  id: number
  userId: number
  tweetId: number
}

/**
 * Model Retweet
 * 
 */
export type Retweet = {
  id: number
  userId: number
  tweetId: number
}


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false
      > {
      /**
       * @private
       */
      private fetcher;
      /**
       * @private
       */
      private readonly dmmf;
      /**
       * @private
       */
      private connectionPromise?;
      /**
       * @private
       */
      private disconnectionPromise?;
      /**
       * @private
       */
      private readonly engineConfig;
      /**
       * @private
       */
      private readonly measurePerformance;

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends PrismaPromise<any>[]>(arg: [...P]): Promise<UnwrapTuple<P>>;

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject>;

  /**
   * `prisma.tweet`: Exposes CRUD operations for the **Tweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tweets
    * const tweets = await prisma.tweet.findMany()
    * ```
    */
  get tweet(): Prisma.TweetDelegate<GlobalReject>;

  /**
   * `prisma.liked`: Exposes CRUD operations for the **Liked** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Likeds
    * const likeds = await prisma.liked.findMany()
    * ```
    */
  get liked(): Prisma.LikedDelegate<GlobalReject>;

  /**
   * `prisma.retweet`: Exposes CRUD operations for the **Retweet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Retweets
    * const retweets = await prisma.retweet.findMany()
    * ```
    */
  get retweet(): Prisma.RetweetDelegate<GlobalReject>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Prisma Client JS version: 3.15.2
   * Query Engine version: 461d6a05159055555eb7dfb337c9fb271cbd4d7e
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: 'DbNull'

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: 'JsonNull'

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: 'AnyNull'

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = {
    [key in keyof T]: T[key] extends false | undefined | null ? never : key
  }[keyof T]

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Buffer
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Exact<A, W = unknown> = 
  W extends unknown ? A extends Narrowable ? Cast<A, W> : Cast<
  {[K in keyof A]: K extends keyof W ? Exact<A[K], W[K]> : never},
  {[K in keyof W]: K extends keyof A ? Exact<A[K], W[K]> : W[K]}>
  : never;

  type Narrowable = string | number | boolean | bigint;

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;

  export function validator<V>(): <S>(select: Exact<S, V>) => S;

  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T

  class PrismaClientFetcher {
    private readonly prisma;
    private readonly debug;
    private readonly hooks?;
    constructor(prisma: PrismaClient<any, any>, debug?: boolean, hooks?: Hooks | undefined);
    request<T>(document: any, dataPath?: string[], rootField?: string, typeName?: string, isList?: boolean, callsite?: string): Promise<T>;
    sanitizeMessage(message: string): string;
    protected unpack(document: any, data: any, path: string[], rootField?: string, isList?: boolean): any;
  }

  export const ModelName: {
    User: 'User',
    Tweet: 'Tweet',
    Liked: 'Liked',
    Retweet: 'Retweet'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     *  * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your prisma.schema file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  export type Hooks = {
    beforeRequest?: (options: { query: string, path: string[], rootField?: string, typeName?: string, document: any }) => any
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed in to the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    tweet: number
    liked: number
    retweet: number
  }

  export type UserCountOutputTypeSelect = {
    tweet?: boolean
    liked?: boolean
    retweet?: boolean
  }

  export type UserCountOutputTypeGetPayload<
    S extends boolean | null | undefined | UserCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? UserCountOutputType
    : S extends undefined
    ? never
    : S extends UserCountOutputTypeArgs
    ?'include' extends U
    ? UserCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof UserCountOutputType ? UserCountOutputType[P] : never
  } 
    : UserCountOutputType
  : UserCountOutputType




  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     * 
    **/
    select?: UserCountOutputTypeSelect | null
  }



  /**
   * Count Type TweetCountOutputType
   */


  export type TweetCountOutputType = {
    user: number
    liked: number
    retweet: number
  }

  export type TweetCountOutputTypeSelect = {
    user?: boolean
    liked?: boolean
    retweet?: boolean
  }

  export type TweetCountOutputTypeGetPayload<
    S extends boolean | null | undefined | TweetCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? TweetCountOutputType
    : S extends undefined
    ? never
    : S extends TweetCountOutputTypeArgs
    ?'include' extends U
    ? TweetCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof TweetCountOutputType ? TweetCountOutputType[P] : never
  } 
    : TweetCountOutputType
  : TweetCountOutputType




  // Custom InputTypes

  /**
   * TweetCountOutputType without action
   */
  export type TweetCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the TweetCountOutputType
     * 
    **/
    select?: TweetCountOutputTypeSelect | null
  }



  /**
   * Count Type LikedCountOutputType
   */


  export type LikedCountOutputType = {
    user: number
    tweet: number
  }

  export type LikedCountOutputTypeSelect = {
    user?: boolean
    tweet?: boolean
  }

  export type LikedCountOutputTypeGetPayload<
    S extends boolean | null | undefined | LikedCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? LikedCountOutputType
    : S extends undefined
    ? never
    : S extends LikedCountOutputTypeArgs
    ?'include' extends U
    ? LikedCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof LikedCountOutputType ? LikedCountOutputType[P] : never
  } 
    : LikedCountOutputType
  : LikedCountOutputType




  // Custom InputTypes

  /**
   * LikedCountOutputType without action
   */
  export type LikedCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the LikedCountOutputType
     * 
    **/
    select?: LikedCountOutputTypeSelect | null
  }



  /**
   * Count Type RetweetCountOutputType
   */


  export type RetweetCountOutputType = {
    user: number
    tweet: number
  }

  export type RetweetCountOutputTypeSelect = {
    user?: boolean
    tweet?: boolean
  }

  export type RetweetCountOutputTypeGetPayload<
    S extends boolean | null | undefined | RetweetCountOutputTypeArgs,
    U = keyof S
      > = S extends true
        ? RetweetCountOutputType
    : S extends undefined
    ? never
    : S extends RetweetCountOutputTypeArgs
    ?'include' extends U
    ? RetweetCountOutputType 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
    P extends keyof RetweetCountOutputType ? RetweetCountOutputType[P] : never
  } 
    : RetweetCountOutputType
  : RetweetCountOutputType




  // Custom InputTypes

  /**
   * RetweetCountOutputType without action
   */
  export type RetweetCountOutputTypeArgs = {
    /**
     * Select specific fields to fetch from the RetweetCountOutputType
     * 
    **/
    select?: RetweetCountOutputTypeSelect | null
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    id: number | null
    phone: number | null
  }

  export type UserSumAggregateOutputType = {
    id: number | null
    phone: number | null
  }

  export type UserMinAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: number | null
    profile: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: number | null
    name: string | null
    email: string | null
    phone: number | null
    profile: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    phone: number
    profile: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    id?: true
    phone?: true
  }

  export type UserSumAggregateInputType = {
    id?: true
    phone?: true
  }

  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    phone?: true
    profile?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs = {
    /**
     * Filter which User to aggregate.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: Array<UserScalarFieldEnum>
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: number
    name: string
    email: string | null
    phone: number | null
    profile: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect = {
    id?: boolean
    name?: boolean
    email?: boolean
    phone?: boolean
    profile?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    tweet?: boolean | TweetFindManyArgs
    liked?: boolean | LikedFindManyArgs
    retweet?: boolean | RetweetFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserInclude = {
    tweet?: boolean | TweetFindManyArgs
    liked?: boolean | LikedFindManyArgs
    retweet?: boolean | RetweetFindManyArgs
    _count?: boolean | UserCountOutputTypeArgs
  }

  export type UserGetPayload<
    S extends boolean | null | undefined | UserArgs,
    U = keyof S
      > = S extends true
        ? User
    : S extends undefined
    ? never
    : S extends UserArgs | UserFindManyArgs
    ?'include' extends U
    ? User  & {
    [P in TrueKeys<S['include']>]:
        P extends 'tweet' ? Array < TweetGetPayload<S['include'][P]>>  :
        P extends 'liked' ? Array < LikedGetPayload<S['include'][P]>>  :
        P extends 'retweet' ? Array < RetweetGetPayload<S['include'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'tweet' ? Array < TweetGetPayload<S['select'][P]>>  :
        P extends 'liked' ? Array < LikedGetPayload<S['select'][P]>>  :
        P extends 'retweet' ? Array < RetweetGetPayload<S['select'][P]>>  :
        P extends '_count' ? UserCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof User ? User[P] : never
  } 
    : User
  : User


  type UserCountArgs = Merge<
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }
  >

  export interface UserDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>> : CheckSelect<T, Prisma__UserClient<User | null >, Prisma__UserClient<UserGetPayload<T> | null >>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs>(
      args?: SelectSubset<T, UserFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs>(
      args: SelectSubset<T, UserCreateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs>(
      args: SelectSubset<T, UserDeleteArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs>(
      args: SelectSubset<T, UserUpdateArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs>(
      args?: SelectSubset<T, UserDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs>(
      args: SelectSubset<T, UserUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs>(
      args: SelectSubset<T, UserUpsertArgs>
    ): CheckSelect<T, Prisma__UserClient<User>, Prisma__UserClient<UserGetPayload<T>>>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    tweet<T extends TweetFindManyArgs = {}>(args?: Subset<T, TweetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tweet>>, PrismaPromise<Array<TweetGetPayload<T>>>>;

    liked<T extends LikedFindManyArgs = {}>(args?: Subset<T, LikedFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Liked>>, PrismaPromise<Array<LikedGetPayload<T>>>>;

    retweet<T extends RetweetFindManyArgs = {}>(args?: Subset<T, RetweetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Retweet>>, PrismaPromise<Array<RetweetGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Throw an Error if a User can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which User to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     * 
    **/
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter, which Users to fetch.
     * 
    **/
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     * 
    **/
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     * 
    **/
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     * 
    **/
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to create a User.
     * 
    **/
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User update
   */
  export type UserUpdateArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The data needed to update a User.
     * 
    **/
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs = {
    /**
     * The data used to update Users.
     * 
    **/
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * The filter to search for the User to update in case it exists.
     * 
    **/
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     * 
    **/
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
    /**
     * Filter which User to delete.
     * 
    **/
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs = {
    /**
     * Filter which Users to delete
     * 
    **/
    where?: UserWhereInput
  }


  /**
   * User without action
   */
  export type UserArgs = {
    /**
     * Select specific fields to fetch from the User
     * 
    **/
    select?: UserSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: UserInclude | null
  }



  /**
   * Model Tweet
   */


  export type AggregateTweet = {
    _count: TweetCountAggregateOutputType | null
    _avg: TweetAvgAggregateOutputType | null
    _sum: TweetSumAggregateOutputType | null
    _min: TweetMinAggregateOutputType | null
    _max: TweetMaxAggregateOutputType | null
  }

  export type TweetAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    viewCount: number | null
  }

  export type TweetSumAggregateOutputType = {
    id: number | null
    userId: number | null
    viewCount: number | null
  }

  export type TweetMinAggregateOutputType = {
    id: number | null
    userId: number | null
    contents: string | null
    photo: string | null
    viewCount: number | null
  }

  export type TweetMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    contents: string | null
    photo: string | null
    viewCount: number | null
  }

  export type TweetCountAggregateOutputType = {
    id: number
    userId: number
    contents: number
    photo: number
    viewCount: number
    _all: number
  }


  export type TweetAvgAggregateInputType = {
    id?: true
    userId?: true
    viewCount?: true
  }

  export type TweetSumAggregateInputType = {
    id?: true
    userId?: true
    viewCount?: true
  }

  export type TweetMinAggregateInputType = {
    id?: true
    userId?: true
    contents?: true
    photo?: true
    viewCount?: true
  }

  export type TweetMaxAggregateInputType = {
    id?: true
    userId?: true
    contents?: true
    photo?: true
    viewCount?: true
  }

  export type TweetCountAggregateInputType = {
    id?: true
    userId?: true
    contents?: true
    photo?: true
    viewCount?: true
    _all?: true
  }

  export type TweetAggregateArgs = {
    /**
     * Filter which Tweet to aggregate.
     * 
    **/
    where?: TweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tweets to fetch.
     * 
    **/
    orderBy?: Enumerable<TweetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: TweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tweets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tweets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tweets
    **/
    _count?: true | TweetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TweetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TweetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TweetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TweetMaxAggregateInputType
  }

  export type GetTweetAggregateType<T extends TweetAggregateArgs> = {
        [P in keyof T & keyof AggregateTweet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTweet[P]>
      : GetScalarType<T[P], AggregateTweet[P]>
  }




  export type TweetGroupByArgs = {
    where?: TweetWhereInput
    orderBy?: Enumerable<TweetOrderByWithAggregationInput>
    by: Array<TweetScalarFieldEnum>
    having?: TweetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TweetCountAggregateInputType | true
    _avg?: TweetAvgAggregateInputType
    _sum?: TweetSumAggregateInputType
    _min?: TweetMinAggregateInputType
    _max?: TweetMaxAggregateInputType
  }


  export type TweetGroupByOutputType = {
    id: number
    userId: number
    contents: string
    photo: string | null
    viewCount: number
    _count: TweetCountAggregateOutputType | null
    _avg: TweetAvgAggregateOutputType | null
    _sum: TweetSumAggregateOutputType | null
    _min: TweetMinAggregateOutputType | null
    _max: TweetMaxAggregateOutputType | null
  }

  type GetTweetGroupByPayload<T extends TweetGroupByArgs> = PrismaPromise<
    Array<
      PickArray<TweetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TweetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TweetGroupByOutputType[P]>
            : GetScalarType<T[P], TweetGroupByOutputType[P]>
        }
      >
    >


  export type TweetSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserFindManyArgs
    contents?: boolean
    photo?: boolean
    liked?: boolean | LikedFindManyArgs
    retweet?: boolean | RetweetFindManyArgs
    viewCount?: boolean
    _count?: boolean | TweetCountOutputTypeArgs
  }

  export type TweetInclude = {
    user?: boolean | UserFindManyArgs
    liked?: boolean | LikedFindManyArgs
    retweet?: boolean | RetweetFindManyArgs
    _count?: boolean | TweetCountOutputTypeArgs
  }

  export type TweetGetPayload<
    S extends boolean | null | undefined | TweetArgs,
    U = keyof S
      > = S extends true
        ? Tweet
    : S extends undefined
    ? never
    : S extends TweetArgs | TweetFindManyArgs
    ?'include' extends U
    ? Tweet  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'liked' ? Array < LikedGetPayload<S['include'][P]>>  :
        P extends 'retweet' ? Array < RetweetGetPayload<S['include'][P]>>  :
        P extends '_count' ? TweetCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'liked' ? Array < LikedGetPayload<S['select'][P]>>  :
        P extends 'retweet' ? Array < RetweetGetPayload<S['select'][P]>>  :
        P extends '_count' ? TweetCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Tweet ? Tweet[P] : never
  } 
    : Tweet
  : Tweet


  type TweetCountArgs = Merge<
    Omit<TweetFindManyArgs, 'select' | 'include'> & {
      select?: TweetCountAggregateInputType | true
    }
  >

  export interface TweetDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Tweet that matches the filter.
     * @param {TweetFindUniqueArgs} args - Arguments to find a Tweet
     * @example
     * // Get one Tweet
     * const tweet = await prisma.tweet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TweetFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, TweetFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Tweet'> extends True ? CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>> : CheckSelect<T, Prisma__TweetClient<Tweet | null >, Prisma__TweetClient<TweetGetPayload<T> | null >>

    /**
     * Find the first Tweet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TweetFindFirstArgs} args - Arguments to find a Tweet
     * @example
     * // Get one Tweet
     * const tweet = await prisma.tweet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TweetFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, TweetFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Tweet'> extends True ? CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>> : CheckSelect<T, Prisma__TweetClient<Tweet | null >, Prisma__TweetClient<TweetGetPayload<T> | null >>

    /**
     * Find zero or more Tweets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TweetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tweets
     * const tweets = await prisma.tweet.findMany()
     * 
     * // Get first 10 Tweets
     * const tweets = await prisma.tweet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const tweetWithIdOnly = await prisma.tweet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TweetFindManyArgs>(
      args?: SelectSubset<T, TweetFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Tweet>>, PrismaPromise<Array<TweetGetPayload<T>>>>

    /**
     * Create a Tweet.
     * @param {TweetCreateArgs} args - Arguments to create a Tweet.
     * @example
     * // Create one Tweet
     * const Tweet = await prisma.tweet.create({
     *   data: {
     *     // ... data to create a Tweet
     *   }
     * })
     * 
    **/
    create<T extends TweetCreateArgs>(
      args: SelectSubset<T, TweetCreateArgs>
    ): CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>>

    /**
     * Delete a Tweet.
     * @param {TweetDeleteArgs} args - Arguments to delete one Tweet.
     * @example
     * // Delete one Tweet
     * const Tweet = await prisma.tweet.delete({
     *   where: {
     *     // ... filter to delete one Tweet
     *   }
     * })
     * 
    **/
    delete<T extends TweetDeleteArgs>(
      args: SelectSubset<T, TweetDeleteArgs>
    ): CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>>

    /**
     * Update one Tweet.
     * @param {TweetUpdateArgs} args - Arguments to update one Tweet.
     * @example
     * // Update one Tweet
     * const tweet = await prisma.tweet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TweetUpdateArgs>(
      args: SelectSubset<T, TweetUpdateArgs>
    ): CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>>

    /**
     * Delete zero or more Tweets.
     * @param {TweetDeleteManyArgs} args - Arguments to filter Tweets to delete.
     * @example
     * // Delete a few Tweets
     * const { count } = await prisma.tweet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TweetDeleteManyArgs>(
      args?: SelectSubset<T, TweetDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TweetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tweets
     * const tweet = await prisma.tweet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TweetUpdateManyArgs>(
      args: SelectSubset<T, TweetUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Tweet.
     * @param {TweetUpsertArgs} args - Arguments to update or create a Tweet.
     * @example
     * // Update or create a Tweet
     * const tweet = await prisma.tweet.upsert({
     *   create: {
     *     // ... data to create a Tweet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tweet we want to update
     *   }
     * })
    **/
    upsert<T extends TweetUpsertArgs>(
      args: SelectSubset<T, TweetUpsertArgs>
    ): CheckSelect<T, Prisma__TweetClient<Tweet>, Prisma__TweetClient<TweetGetPayload<T>>>

    /**
     * Count the number of Tweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TweetCountArgs} args - Arguments to filter Tweets to count.
     * @example
     * // Count the number of Tweets
     * const count = await prisma.tweet.count({
     *   where: {
     *     // ... the filter for the Tweets we want to count
     *   }
     * })
    **/
    count<T extends TweetCountArgs>(
      args?: Subset<T, TweetCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TweetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TweetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TweetAggregateArgs>(args: Subset<T, TweetAggregateArgs>): PrismaPromise<GetTweetAggregateType<T>>

    /**
     * Group by Tweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TweetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TweetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TweetGroupByArgs['orderBy'] }
        : { orderBy?: TweetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TweetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTweetGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tweet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__TweetClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    liked<T extends LikedFindManyArgs = {}>(args?: Subset<T, LikedFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Liked>>, PrismaPromise<Array<LikedGetPayload<T>>>>;

    retweet<T extends RetweetFindManyArgs = {}>(args?: Subset<T, RetweetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Retweet>>, PrismaPromise<Array<RetweetGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Tweet findUnique
   */
  export type TweetFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Tweet
     * 
    **/
    select?: TweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TweetInclude | null
    /**
     * Throw an Error if a Tweet can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tweet to fetch.
     * 
    **/
    where: TweetWhereUniqueInput
  }


  /**
   * Tweet findFirst
   */
  export type TweetFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Tweet
     * 
    **/
    select?: TweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TweetInclude | null
    /**
     * Throw an Error if a Tweet can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Tweet to fetch.
     * 
    **/
    where?: TweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tweets to fetch.
     * 
    **/
    orderBy?: Enumerable<TweetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tweets.
     * 
    **/
    cursor?: TweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tweets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tweets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tweets.
     * 
    **/
    distinct?: Enumerable<TweetScalarFieldEnum>
  }


  /**
   * Tweet findMany
   */
  export type TweetFindManyArgs = {
    /**
     * Select specific fields to fetch from the Tweet
     * 
    **/
    select?: TweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TweetInclude | null
    /**
     * Filter, which Tweets to fetch.
     * 
    **/
    where?: TweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tweets to fetch.
     * 
    **/
    orderBy?: Enumerable<TweetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tweets.
     * 
    **/
    cursor?: TweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tweets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tweets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<TweetScalarFieldEnum>
  }


  /**
   * Tweet create
   */
  export type TweetCreateArgs = {
    /**
     * Select specific fields to fetch from the Tweet
     * 
    **/
    select?: TweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TweetInclude | null
    /**
     * The data needed to create a Tweet.
     * 
    **/
    data: XOR<TweetCreateInput, TweetUncheckedCreateInput>
  }


  /**
   * Tweet update
   */
  export type TweetUpdateArgs = {
    /**
     * Select specific fields to fetch from the Tweet
     * 
    **/
    select?: TweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TweetInclude | null
    /**
     * The data needed to update a Tweet.
     * 
    **/
    data: XOR<TweetUpdateInput, TweetUncheckedUpdateInput>
    /**
     * Choose, which Tweet to update.
     * 
    **/
    where: TweetWhereUniqueInput
  }


  /**
   * Tweet updateMany
   */
  export type TweetUpdateManyArgs = {
    /**
     * The data used to update Tweets.
     * 
    **/
    data: XOR<TweetUpdateManyMutationInput, TweetUncheckedUpdateManyInput>
    /**
     * Filter which Tweets to update
     * 
    **/
    where?: TweetWhereInput
  }


  /**
   * Tweet upsert
   */
  export type TweetUpsertArgs = {
    /**
     * Select specific fields to fetch from the Tweet
     * 
    **/
    select?: TweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TweetInclude | null
    /**
     * The filter to search for the Tweet to update in case it exists.
     * 
    **/
    where: TweetWhereUniqueInput
    /**
     * In case the Tweet found by the `where` argument doesn't exist, create a new Tweet with this data.
     * 
    **/
    create: XOR<TweetCreateInput, TweetUncheckedCreateInput>
    /**
     * In case the Tweet was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<TweetUpdateInput, TweetUncheckedUpdateInput>
  }


  /**
   * Tweet delete
   */
  export type TweetDeleteArgs = {
    /**
     * Select specific fields to fetch from the Tweet
     * 
    **/
    select?: TweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TweetInclude | null
    /**
     * Filter which Tweet to delete.
     * 
    **/
    where: TweetWhereUniqueInput
  }


  /**
   * Tweet deleteMany
   */
  export type TweetDeleteManyArgs = {
    /**
     * Filter which Tweets to delete
     * 
    **/
    where?: TweetWhereInput
  }


  /**
   * Tweet without action
   */
  export type TweetArgs = {
    /**
     * Select specific fields to fetch from the Tweet
     * 
    **/
    select?: TweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: TweetInclude | null
  }



  /**
   * Model Liked
   */


  export type AggregateLiked = {
    _count: LikedCountAggregateOutputType | null
    _avg: LikedAvgAggregateOutputType | null
    _sum: LikedSumAggregateOutputType | null
    _min: LikedMinAggregateOutputType | null
    _max: LikedMaxAggregateOutputType | null
  }

  export type LikedAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    tweetId: number | null
  }

  export type LikedSumAggregateOutputType = {
    id: number | null
    userId: number | null
    tweetId: number | null
  }

  export type LikedMinAggregateOutputType = {
    id: number | null
    userId: number | null
    tweetId: number | null
  }

  export type LikedMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    tweetId: number | null
  }

  export type LikedCountAggregateOutputType = {
    id: number
    userId: number
    tweetId: number
    _all: number
  }


  export type LikedAvgAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
  }

  export type LikedSumAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
  }

  export type LikedMinAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
  }

  export type LikedMaxAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
  }

  export type LikedCountAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
    _all?: true
  }

  export type LikedAggregateArgs = {
    /**
     * Filter which Liked to aggregate.
     * 
    **/
    where?: LikedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likeds to fetch.
     * 
    **/
    orderBy?: Enumerable<LikedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: LikedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likeds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Likeds
    **/
    _count?: true | LikedCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: LikedAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: LikedSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: LikedMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: LikedMaxAggregateInputType
  }

  export type GetLikedAggregateType<T extends LikedAggregateArgs> = {
        [P in keyof T & keyof AggregateLiked]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateLiked[P]>
      : GetScalarType<T[P], AggregateLiked[P]>
  }




  export type LikedGroupByArgs = {
    where?: LikedWhereInput
    orderBy?: Enumerable<LikedOrderByWithAggregationInput>
    by: Array<LikedScalarFieldEnum>
    having?: LikedScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: LikedCountAggregateInputType | true
    _avg?: LikedAvgAggregateInputType
    _sum?: LikedSumAggregateInputType
    _min?: LikedMinAggregateInputType
    _max?: LikedMaxAggregateInputType
  }


  export type LikedGroupByOutputType = {
    id: number
    userId: number
    tweetId: number
    _count: LikedCountAggregateOutputType | null
    _avg: LikedAvgAggregateOutputType | null
    _sum: LikedSumAggregateOutputType | null
    _min: LikedMinAggregateOutputType | null
    _max: LikedMaxAggregateOutputType | null
  }

  type GetLikedGroupByPayload<T extends LikedGroupByArgs> = PrismaPromise<
    Array<
      PickArray<LikedGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof LikedGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], LikedGroupByOutputType[P]>
            : GetScalarType<T[P], LikedGroupByOutputType[P]>
        }
      >
    >


  export type LikedSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserFindManyArgs
    tweetId?: boolean
    tweet?: boolean | TweetFindManyArgs
    _count?: boolean | LikedCountOutputTypeArgs
  }

  export type LikedInclude = {
    user?: boolean | UserFindManyArgs
    tweet?: boolean | TweetFindManyArgs
    _count?: boolean | LikedCountOutputTypeArgs
  }

  export type LikedGetPayload<
    S extends boolean | null | undefined | LikedArgs,
    U = keyof S
      > = S extends true
        ? Liked
    : S extends undefined
    ? never
    : S extends LikedArgs | LikedFindManyArgs
    ?'include' extends U
    ? Liked  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'tweet' ? Array < TweetGetPayload<S['include'][P]>>  :
        P extends '_count' ? LikedCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'tweet' ? Array < TweetGetPayload<S['select'][P]>>  :
        P extends '_count' ? LikedCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Liked ? Liked[P] : never
  } 
    : Liked
  : Liked


  type LikedCountArgs = Merge<
    Omit<LikedFindManyArgs, 'select' | 'include'> & {
      select?: LikedCountAggregateInputType | true
    }
  >

  export interface LikedDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Liked that matches the filter.
     * @param {LikedFindUniqueArgs} args - Arguments to find a Liked
     * @example
     * // Get one Liked
     * const liked = await prisma.liked.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends LikedFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, LikedFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Liked'> extends True ? CheckSelect<T, Prisma__LikedClient<Liked>, Prisma__LikedClient<LikedGetPayload<T>>> : CheckSelect<T, Prisma__LikedClient<Liked | null >, Prisma__LikedClient<LikedGetPayload<T> | null >>

    /**
     * Find the first Liked that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedFindFirstArgs} args - Arguments to find a Liked
     * @example
     * // Get one Liked
     * const liked = await prisma.liked.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends LikedFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, LikedFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Liked'> extends True ? CheckSelect<T, Prisma__LikedClient<Liked>, Prisma__LikedClient<LikedGetPayload<T>>> : CheckSelect<T, Prisma__LikedClient<Liked | null >, Prisma__LikedClient<LikedGetPayload<T> | null >>

    /**
     * Find zero or more Likeds that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Likeds
     * const likeds = await prisma.liked.findMany()
     * 
     * // Get first 10 Likeds
     * const likeds = await prisma.liked.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const likedWithIdOnly = await prisma.liked.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends LikedFindManyArgs>(
      args?: SelectSubset<T, LikedFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Liked>>, PrismaPromise<Array<LikedGetPayload<T>>>>

    /**
     * Create a Liked.
     * @param {LikedCreateArgs} args - Arguments to create a Liked.
     * @example
     * // Create one Liked
     * const Liked = await prisma.liked.create({
     *   data: {
     *     // ... data to create a Liked
     *   }
     * })
     * 
    **/
    create<T extends LikedCreateArgs>(
      args: SelectSubset<T, LikedCreateArgs>
    ): CheckSelect<T, Prisma__LikedClient<Liked>, Prisma__LikedClient<LikedGetPayload<T>>>

    /**
     * Delete a Liked.
     * @param {LikedDeleteArgs} args - Arguments to delete one Liked.
     * @example
     * // Delete one Liked
     * const Liked = await prisma.liked.delete({
     *   where: {
     *     // ... filter to delete one Liked
     *   }
     * })
     * 
    **/
    delete<T extends LikedDeleteArgs>(
      args: SelectSubset<T, LikedDeleteArgs>
    ): CheckSelect<T, Prisma__LikedClient<Liked>, Prisma__LikedClient<LikedGetPayload<T>>>

    /**
     * Update one Liked.
     * @param {LikedUpdateArgs} args - Arguments to update one Liked.
     * @example
     * // Update one Liked
     * const liked = await prisma.liked.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends LikedUpdateArgs>(
      args: SelectSubset<T, LikedUpdateArgs>
    ): CheckSelect<T, Prisma__LikedClient<Liked>, Prisma__LikedClient<LikedGetPayload<T>>>

    /**
     * Delete zero or more Likeds.
     * @param {LikedDeleteManyArgs} args - Arguments to filter Likeds to delete.
     * @example
     * // Delete a few Likeds
     * const { count } = await prisma.liked.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends LikedDeleteManyArgs>(
      args?: SelectSubset<T, LikedDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Likeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Likeds
     * const liked = await prisma.liked.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends LikedUpdateManyArgs>(
      args: SelectSubset<T, LikedUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Liked.
     * @param {LikedUpsertArgs} args - Arguments to update or create a Liked.
     * @example
     * // Update or create a Liked
     * const liked = await prisma.liked.upsert({
     *   create: {
     *     // ... data to create a Liked
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Liked we want to update
     *   }
     * })
    **/
    upsert<T extends LikedUpsertArgs>(
      args: SelectSubset<T, LikedUpsertArgs>
    ): CheckSelect<T, Prisma__LikedClient<Liked>, Prisma__LikedClient<LikedGetPayload<T>>>

    /**
     * Count the number of Likeds.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedCountArgs} args - Arguments to filter Likeds to count.
     * @example
     * // Count the number of Likeds
     * const count = await prisma.liked.count({
     *   where: {
     *     // ... the filter for the Likeds we want to count
     *   }
     * })
    **/
    count<T extends LikedCountArgs>(
      args?: Subset<T, LikedCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], LikedCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Liked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends LikedAggregateArgs>(args: Subset<T, LikedAggregateArgs>): PrismaPromise<GetLikedAggregateType<T>>

    /**
     * Group by Liked.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {LikedGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends LikedGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: LikedGroupByArgs['orderBy'] }
        : { orderBy?: LikedGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, LikedGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetLikedGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Liked.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__LikedClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    tweet<T extends TweetFindManyArgs = {}>(args?: Subset<T, TweetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tweet>>, PrismaPromise<Array<TweetGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Liked findUnique
   */
  export type LikedFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Liked
     * 
    **/
    select?: LikedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LikedInclude | null
    /**
     * Throw an Error if a Liked can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Liked to fetch.
     * 
    **/
    where: LikedWhereUniqueInput
  }


  /**
   * Liked findFirst
   */
  export type LikedFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Liked
     * 
    **/
    select?: LikedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LikedInclude | null
    /**
     * Throw an Error if a Liked can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Liked to fetch.
     * 
    **/
    where?: LikedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likeds to fetch.
     * 
    **/
    orderBy?: Enumerable<LikedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Likeds.
     * 
    **/
    cursor?: LikedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likeds.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Likeds.
     * 
    **/
    distinct?: Enumerable<LikedScalarFieldEnum>
  }


  /**
   * Liked findMany
   */
  export type LikedFindManyArgs = {
    /**
     * Select specific fields to fetch from the Liked
     * 
    **/
    select?: LikedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LikedInclude | null
    /**
     * Filter, which Likeds to fetch.
     * 
    **/
    where?: LikedWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Likeds to fetch.
     * 
    **/
    orderBy?: Enumerable<LikedOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Likeds.
     * 
    **/
    cursor?: LikedWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Likeds from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Likeds.
     * 
    **/
    skip?: number
    distinct?: Enumerable<LikedScalarFieldEnum>
  }


  /**
   * Liked create
   */
  export type LikedCreateArgs = {
    /**
     * Select specific fields to fetch from the Liked
     * 
    **/
    select?: LikedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LikedInclude | null
    /**
     * The data needed to create a Liked.
     * 
    **/
    data: XOR<LikedCreateInput, LikedUncheckedCreateInput>
  }


  /**
   * Liked update
   */
  export type LikedUpdateArgs = {
    /**
     * Select specific fields to fetch from the Liked
     * 
    **/
    select?: LikedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LikedInclude | null
    /**
     * The data needed to update a Liked.
     * 
    **/
    data: XOR<LikedUpdateInput, LikedUncheckedUpdateInput>
    /**
     * Choose, which Liked to update.
     * 
    **/
    where: LikedWhereUniqueInput
  }


  /**
   * Liked updateMany
   */
  export type LikedUpdateManyArgs = {
    /**
     * The data used to update Likeds.
     * 
    **/
    data: XOR<LikedUpdateManyMutationInput, LikedUncheckedUpdateManyInput>
    /**
     * Filter which Likeds to update
     * 
    **/
    where?: LikedWhereInput
  }


  /**
   * Liked upsert
   */
  export type LikedUpsertArgs = {
    /**
     * Select specific fields to fetch from the Liked
     * 
    **/
    select?: LikedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LikedInclude | null
    /**
     * The filter to search for the Liked to update in case it exists.
     * 
    **/
    where: LikedWhereUniqueInput
    /**
     * In case the Liked found by the `where` argument doesn't exist, create a new Liked with this data.
     * 
    **/
    create: XOR<LikedCreateInput, LikedUncheckedCreateInput>
    /**
     * In case the Liked was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<LikedUpdateInput, LikedUncheckedUpdateInput>
  }


  /**
   * Liked delete
   */
  export type LikedDeleteArgs = {
    /**
     * Select specific fields to fetch from the Liked
     * 
    **/
    select?: LikedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LikedInclude | null
    /**
     * Filter which Liked to delete.
     * 
    **/
    where: LikedWhereUniqueInput
  }


  /**
   * Liked deleteMany
   */
  export type LikedDeleteManyArgs = {
    /**
     * Filter which Likeds to delete
     * 
    **/
    where?: LikedWhereInput
  }


  /**
   * Liked without action
   */
  export type LikedArgs = {
    /**
     * Select specific fields to fetch from the Liked
     * 
    **/
    select?: LikedSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: LikedInclude | null
  }



  /**
   * Model Retweet
   */


  export type AggregateRetweet = {
    _count: RetweetCountAggregateOutputType | null
    _avg: RetweetAvgAggregateOutputType | null
    _sum: RetweetSumAggregateOutputType | null
    _min: RetweetMinAggregateOutputType | null
    _max: RetweetMaxAggregateOutputType | null
  }

  export type RetweetAvgAggregateOutputType = {
    id: number | null
    userId: number | null
    tweetId: number | null
  }

  export type RetweetSumAggregateOutputType = {
    id: number | null
    userId: number | null
    tweetId: number | null
  }

  export type RetweetMinAggregateOutputType = {
    id: number | null
    userId: number | null
    tweetId: number | null
  }

  export type RetweetMaxAggregateOutputType = {
    id: number | null
    userId: number | null
    tweetId: number | null
  }

  export type RetweetCountAggregateOutputType = {
    id: number
    userId: number
    tweetId: number
    _all: number
  }


  export type RetweetAvgAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
  }

  export type RetweetSumAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
  }

  export type RetweetMinAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
  }

  export type RetweetMaxAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
  }

  export type RetweetCountAggregateInputType = {
    id?: true
    userId?: true
    tweetId?: true
    _all?: true
  }

  export type RetweetAggregateArgs = {
    /**
     * Filter which Retweet to aggregate.
     * 
    **/
    where?: RetweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retweets to fetch.
     * 
    **/
    orderBy?: Enumerable<RetweetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     * 
    **/
    cursor?: RetweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retweets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retweets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Retweets
    **/
    _count?: true | RetweetCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RetweetAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RetweetSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RetweetMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RetweetMaxAggregateInputType
  }

  export type GetRetweetAggregateType<T extends RetweetAggregateArgs> = {
        [P in keyof T & keyof AggregateRetweet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRetweet[P]>
      : GetScalarType<T[P], AggregateRetweet[P]>
  }




  export type RetweetGroupByArgs = {
    where?: RetweetWhereInput
    orderBy?: Enumerable<RetweetOrderByWithAggregationInput>
    by: Array<RetweetScalarFieldEnum>
    having?: RetweetScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RetweetCountAggregateInputType | true
    _avg?: RetweetAvgAggregateInputType
    _sum?: RetweetSumAggregateInputType
    _min?: RetweetMinAggregateInputType
    _max?: RetweetMaxAggregateInputType
  }


  export type RetweetGroupByOutputType = {
    id: number
    userId: number
    tweetId: number
    _count: RetweetCountAggregateOutputType | null
    _avg: RetweetAvgAggregateOutputType | null
    _sum: RetweetSumAggregateOutputType | null
    _min: RetweetMinAggregateOutputType | null
    _max: RetweetMaxAggregateOutputType | null
  }

  type GetRetweetGroupByPayload<T extends RetweetGroupByArgs> = PrismaPromise<
    Array<
      PickArray<RetweetGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RetweetGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RetweetGroupByOutputType[P]>
            : GetScalarType<T[P], RetweetGroupByOutputType[P]>
        }
      >
    >


  export type RetweetSelect = {
    id?: boolean
    userId?: boolean
    user?: boolean | UserFindManyArgs
    tweetId?: boolean
    tweet?: boolean | TweetFindManyArgs
    _count?: boolean | RetweetCountOutputTypeArgs
  }

  export type RetweetInclude = {
    user?: boolean | UserFindManyArgs
    tweet?: boolean | TweetFindManyArgs
    _count?: boolean | RetweetCountOutputTypeArgs
  }

  export type RetweetGetPayload<
    S extends boolean | null | undefined | RetweetArgs,
    U = keyof S
      > = S extends true
        ? Retweet
    : S extends undefined
    ? never
    : S extends RetweetArgs | RetweetFindManyArgs
    ?'include' extends U
    ? Retweet  & {
    [P in TrueKeys<S['include']>]:
        P extends 'user' ? Array < UserGetPayload<S['include'][P]>>  :
        P extends 'tweet' ? Array < TweetGetPayload<S['include'][P]>>  :
        P extends '_count' ? RetweetCountOutputTypeGetPayload<S['include'][P]> :  never
  } 
    : 'select' extends U
    ? {
    [P in TrueKeys<S['select']>]:
        P extends 'user' ? Array < UserGetPayload<S['select'][P]>>  :
        P extends 'tweet' ? Array < TweetGetPayload<S['select'][P]>>  :
        P extends '_count' ? RetweetCountOutputTypeGetPayload<S['select'][P]> :  P extends keyof Retweet ? Retweet[P] : never
  } 
    : Retweet
  : Retweet


  type RetweetCountArgs = Merge<
    Omit<RetweetFindManyArgs, 'select' | 'include'> & {
      select?: RetweetCountAggregateInputType | true
    }
  >

  export interface RetweetDelegate<GlobalRejectSettings> {
    /**
     * Find zero or one Retweet that matches the filter.
     * @param {RetweetFindUniqueArgs} args - Arguments to find a Retweet
     * @example
     * // Get one Retweet
     * const retweet = await prisma.retweet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends RetweetFindUniqueArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, RetweetFindUniqueArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Retweet'> extends True ? CheckSelect<T, Prisma__RetweetClient<Retweet>, Prisma__RetweetClient<RetweetGetPayload<T>>> : CheckSelect<T, Prisma__RetweetClient<Retweet | null >, Prisma__RetweetClient<RetweetGetPayload<T> | null >>

    /**
     * Find the first Retweet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetFindFirstArgs} args - Arguments to find a Retweet
     * @example
     * // Get one Retweet
     * const retweet = await prisma.retweet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends RetweetFindFirstArgs,  LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, RetweetFindFirstArgs>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Retweet'> extends True ? CheckSelect<T, Prisma__RetweetClient<Retweet>, Prisma__RetweetClient<RetweetGetPayload<T>>> : CheckSelect<T, Prisma__RetweetClient<Retweet | null >, Prisma__RetweetClient<RetweetGetPayload<T> | null >>

    /**
     * Find zero or more Retweets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Retweets
     * const retweets = await prisma.retweet.findMany()
     * 
     * // Get first 10 Retweets
     * const retweets = await prisma.retweet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const retweetWithIdOnly = await prisma.retweet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends RetweetFindManyArgs>(
      args?: SelectSubset<T, RetweetFindManyArgs>
    ): CheckSelect<T, PrismaPromise<Array<Retweet>>, PrismaPromise<Array<RetweetGetPayload<T>>>>

    /**
     * Create a Retweet.
     * @param {RetweetCreateArgs} args - Arguments to create a Retweet.
     * @example
     * // Create one Retweet
     * const Retweet = await prisma.retweet.create({
     *   data: {
     *     // ... data to create a Retweet
     *   }
     * })
     * 
    **/
    create<T extends RetweetCreateArgs>(
      args: SelectSubset<T, RetweetCreateArgs>
    ): CheckSelect<T, Prisma__RetweetClient<Retweet>, Prisma__RetweetClient<RetweetGetPayload<T>>>

    /**
     * Delete a Retweet.
     * @param {RetweetDeleteArgs} args - Arguments to delete one Retweet.
     * @example
     * // Delete one Retweet
     * const Retweet = await prisma.retweet.delete({
     *   where: {
     *     // ... filter to delete one Retweet
     *   }
     * })
     * 
    **/
    delete<T extends RetweetDeleteArgs>(
      args: SelectSubset<T, RetweetDeleteArgs>
    ): CheckSelect<T, Prisma__RetweetClient<Retweet>, Prisma__RetweetClient<RetweetGetPayload<T>>>

    /**
     * Update one Retweet.
     * @param {RetweetUpdateArgs} args - Arguments to update one Retweet.
     * @example
     * // Update one Retweet
     * const retweet = await prisma.retweet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends RetweetUpdateArgs>(
      args: SelectSubset<T, RetweetUpdateArgs>
    ): CheckSelect<T, Prisma__RetweetClient<Retweet>, Prisma__RetweetClient<RetweetGetPayload<T>>>

    /**
     * Delete zero or more Retweets.
     * @param {RetweetDeleteManyArgs} args - Arguments to filter Retweets to delete.
     * @example
     * // Delete a few Retweets
     * const { count } = await prisma.retweet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends RetweetDeleteManyArgs>(
      args?: SelectSubset<T, RetweetDeleteManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Update zero or more Retweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Retweets
     * const retweet = await prisma.retweet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends RetweetUpdateManyArgs>(
      args: SelectSubset<T, RetweetUpdateManyArgs>
    ): PrismaPromise<BatchPayload>

    /**
     * Create or update one Retweet.
     * @param {RetweetUpsertArgs} args - Arguments to update or create a Retweet.
     * @example
     * // Update or create a Retweet
     * const retweet = await prisma.retweet.upsert({
     *   create: {
     *     // ... data to create a Retweet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Retweet we want to update
     *   }
     * })
    **/
    upsert<T extends RetweetUpsertArgs>(
      args: SelectSubset<T, RetweetUpsertArgs>
    ): CheckSelect<T, Prisma__RetweetClient<Retweet>, Prisma__RetweetClient<RetweetGetPayload<T>>>

    /**
     * Count the number of Retweets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetCountArgs} args - Arguments to filter Retweets to count.
     * @example
     * // Count the number of Retweets
     * const count = await prisma.retweet.count({
     *   where: {
     *     // ... the filter for the Retweets we want to count
     *   }
     * })
    **/
    count<T extends RetweetCountArgs>(
      args?: Subset<T, RetweetCountArgs>,
    ): PrismaPromise<
      T extends _Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RetweetCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Retweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RetweetAggregateArgs>(args: Subset<T, RetweetAggregateArgs>): PrismaPromise<GetRetweetAggregateType<T>>

    /**
     * Group by Retweet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RetweetGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RetweetGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RetweetGroupByArgs['orderBy'] }
        : { orderBy?: RetweetGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RetweetGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRetweetGroupByPayload<T> : PrismaPromise<InputErrors>
  }

  /**
   * The delegate class that acts as a "Promise-like" for Retweet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__RetweetClient<T> implements PrismaPromise<T> {
    [prisma]: true;
    private readonly _dmmf;
    private readonly _fetcher;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    constructor(_dmmf: runtime.DMMFClass, _fetcher: PrismaClientFetcher, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);
    readonly [Symbol.toStringTag]: 'PrismaClientPromise';

    user<T extends UserFindManyArgs = {}>(args?: Subset<T, UserFindManyArgs>): CheckSelect<T, PrismaPromise<Array<User>>, PrismaPromise<Array<UserGetPayload<T>>>>;

    tweet<T extends TweetFindManyArgs = {}>(args?: Subset<T, TweetFindManyArgs>): CheckSelect<T, PrismaPromise<Array<Tweet>>, PrismaPromise<Array<TweetGetPayload<T>>>>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }

  // Custom InputTypes

  /**
   * Retweet findUnique
   */
  export type RetweetFindUniqueArgs = {
    /**
     * Select specific fields to fetch from the Retweet
     * 
    **/
    select?: RetweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RetweetInclude | null
    /**
     * Throw an Error if a Retweet can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Retweet to fetch.
     * 
    **/
    where: RetweetWhereUniqueInput
  }


  /**
   * Retweet findFirst
   */
  export type RetweetFindFirstArgs = {
    /**
     * Select specific fields to fetch from the Retweet
     * 
    **/
    select?: RetweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RetweetInclude | null
    /**
     * Throw an Error if a Retweet can't be found
     * 
    **/
    rejectOnNotFound?: RejectOnNotFound
    /**
     * Filter, which Retweet to fetch.
     * 
    **/
    where?: RetweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retweets to fetch.
     * 
    **/
    orderBy?: Enumerable<RetweetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Retweets.
     * 
    **/
    cursor?: RetweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retweets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retweets.
     * 
    **/
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Retweets.
     * 
    **/
    distinct?: Enumerable<RetweetScalarFieldEnum>
  }


  /**
   * Retweet findMany
   */
  export type RetweetFindManyArgs = {
    /**
     * Select specific fields to fetch from the Retweet
     * 
    **/
    select?: RetweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RetweetInclude | null
    /**
     * Filter, which Retweets to fetch.
     * 
    **/
    where?: RetweetWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Retweets to fetch.
     * 
    **/
    orderBy?: Enumerable<RetweetOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Retweets.
     * 
    **/
    cursor?: RetweetWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Retweets from the position of the cursor.
     * 
    **/
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Retweets.
     * 
    **/
    skip?: number
    distinct?: Enumerable<RetweetScalarFieldEnum>
  }


  /**
   * Retweet create
   */
  export type RetweetCreateArgs = {
    /**
     * Select specific fields to fetch from the Retweet
     * 
    **/
    select?: RetweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RetweetInclude | null
    /**
     * The data needed to create a Retweet.
     * 
    **/
    data: XOR<RetweetCreateInput, RetweetUncheckedCreateInput>
  }


  /**
   * Retweet update
   */
  export type RetweetUpdateArgs = {
    /**
     * Select specific fields to fetch from the Retweet
     * 
    **/
    select?: RetweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RetweetInclude | null
    /**
     * The data needed to update a Retweet.
     * 
    **/
    data: XOR<RetweetUpdateInput, RetweetUncheckedUpdateInput>
    /**
     * Choose, which Retweet to update.
     * 
    **/
    where: RetweetWhereUniqueInput
  }


  /**
   * Retweet updateMany
   */
  export type RetweetUpdateManyArgs = {
    /**
     * The data used to update Retweets.
     * 
    **/
    data: XOR<RetweetUpdateManyMutationInput, RetweetUncheckedUpdateManyInput>
    /**
     * Filter which Retweets to update
     * 
    **/
    where?: RetweetWhereInput
  }


  /**
   * Retweet upsert
   */
  export type RetweetUpsertArgs = {
    /**
     * Select specific fields to fetch from the Retweet
     * 
    **/
    select?: RetweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RetweetInclude | null
    /**
     * The filter to search for the Retweet to update in case it exists.
     * 
    **/
    where: RetweetWhereUniqueInput
    /**
     * In case the Retweet found by the `where` argument doesn't exist, create a new Retweet with this data.
     * 
    **/
    create: XOR<RetweetCreateInput, RetweetUncheckedCreateInput>
    /**
     * In case the Retweet was found with the provided `where` argument, update it with this data.
     * 
    **/
    update: XOR<RetweetUpdateInput, RetweetUncheckedUpdateInput>
  }


  /**
   * Retweet delete
   */
  export type RetweetDeleteArgs = {
    /**
     * Select specific fields to fetch from the Retweet
     * 
    **/
    select?: RetweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RetweetInclude | null
    /**
     * Filter which Retweet to delete.
     * 
    **/
    where: RetweetWhereUniqueInput
  }


  /**
   * Retweet deleteMany
   */
  export type RetweetDeleteManyArgs = {
    /**
     * Filter which Retweets to delete
     * 
    **/
    where?: RetweetWhereInput
  }


  /**
   * Retweet without action
   */
  export type RetweetArgs = {
    /**
     * Select specific fields to fetch from the Retweet
     * 
    **/
    select?: RetweetSelect | null
    /**
     * Choose, which related nodes to fetch as well.
     * 
    **/
    include?: RetweetInclude | null
  }



  /**
   * Enums
   */

  // Based on
  // https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275

  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    phone: 'phone',
    profile: 'profile',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const TweetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    contents: 'contents',
    photo: 'photo',
    viewCount: 'viewCount'
  };

  export type TweetScalarFieldEnum = (typeof TweetScalarFieldEnum)[keyof typeof TweetScalarFieldEnum]


  export const LikedScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tweetId: 'tweetId'
  };

  export type LikedScalarFieldEnum = (typeof LikedScalarFieldEnum)[keyof typeof LikedScalarFieldEnum]


  export const RetweetScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    tweetId: 'tweetId'
  };

  export type RetweetScalarFieldEnum = (typeof RetweetScalarFieldEnum)[keyof typeof RetweetScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringNullableFilter | string | null
    phone?: IntNullableFilter | number | null
    profile?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    tweet?: TweetListRelationFilter
    liked?: LikedListRelationFilter
    retweet?: RetweetListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    tweet?: TweetOrderByRelationAggregateInput
    liked?: LikedOrderByRelationAggregateInput
    retweet?: RetweetOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: number
    email?: string
    phone?: number
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    name?: StringWithAggregatesFilter | string
    email?: StringNullableWithAggregatesFilter | string | null
    phone?: IntNullableWithAggregatesFilter | number | null
    profile?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type TweetWhereInput = {
    AND?: Enumerable<TweetWhereInput>
    OR?: Enumerable<TweetWhereInput>
    NOT?: Enumerable<TweetWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    user?: UserListRelationFilter
    contents?: StringFilter | string
    photo?: StringNullableFilter | string | null
    liked?: LikedListRelationFilter
    retweet?: RetweetListRelationFilter
    viewCount?: IntFilter | number
  }

  export type TweetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByRelationAggregateInput
    contents?: SortOrder
    photo?: SortOrder
    liked?: LikedOrderByRelationAggregateInput
    retweet?: RetweetOrderByRelationAggregateInput
    viewCount?: SortOrder
  }

  export type TweetWhereUniqueInput = {
    id?: number
  }

  export type TweetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    photo?: SortOrder
    viewCount?: SortOrder
    _count?: TweetCountOrderByAggregateInput
    _avg?: TweetAvgOrderByAggregateInput
    _max?: TweetMaxOrderByAggregateInput
    _min?: TweetMinOrderByAggregateInput
    _sum?: TweetSumOrderByAggregateInput
  }

  export type TweetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<TweetScalarWhereWithAggregatesInput>
    OR?: Enumerable<TweetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<TweetScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    contents?: StringWithAggregatesFilter | string
    photo?: StringNullableWithAggregatesFilter | string | null
    viewCount?: IntWithAggregatesFilter | number
  }

  export type LikedWhereInput = {
    AND?: Enumerable<LikedWhereInput>
    OR?: Enumerable<LikedWhereInput>
    NOT?: Enumerable<LikedWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    user?: UserListRelationFilter
    tweetId?: IntFilter | number
    tweet?: TweetListRelationFilter
  }

  export type LikedOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByRelationAggregateInput
    tweetId?: SortOrder
    tweet?: TweetOrderByRelationAggregateInput
  }

  export type LikedWhereUniqueInput = {
    id?: number
  }

  export type LikedOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
    _count?: LikedCountOrderByAggregateInput
    _avg?: LikedAvgOrderByAggregateInput
    _max?: LikedMaxOrderByAggregateInput
    _min?: LikedMinOrderByAggregateInput
    _sum?: LikedSumOrderByAggregateInput
  }

  export type LikedScalarWhereWithAggregatesInput = {
    AND?: Enumerable<LikedScalarWhereWithAggregatesInput>
    OR?: Enumerable<LikedScalarWhereWithAggregatesInput>
    NOT?: Enumerable<LikedScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    tweetId?: IntWithAggregatesFilter | number
  }

  export type RetweetWhereInput = {
    AND?: Enumerable<RetweetWhereInput>
    OR?: Enumerable<RetweetWhereInput>
    NOT?: Enumerable<RetweetWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    user?: UserListRelationFilter
    tweetId?: IntFilter | number
    tweet?: TweetListRelationFilter
  }

  export type RetweetOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByRelationAggregateInput
    tweetId?: SortOrder
    tweet?: TweetOrderByRelationAggregateInput
  }

  export type RetweetWhereUniqueInput = {
    id?: number
  }

  export type RetweetOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
    _count?: RetweetCountOrderByAggregateInput
    _avg?: RetweetAvgOrderByAggregateInput
    _max?: RetweetMaxOrderByAggregateInput
    _min?: RetweetMinOrderByAggregateInput
    _sum?: RetweetSumOrderByAggregateInput
  }

  export type RetweetScalarWhereWithAggregatesInput = {
    AND?: Enumerable<RetweetScalarWhereWithAggregatesInput>
    OR?: Enumerable<RetweetScalarWhereWithAggregatesInput>
    NOT?: Enumerable<RetweetScalarWhereWithAggregatesInput>
    id?: IntWithAggregatesFilter | number
    userId?: IntWithAggregatesFilter | number
    tweetId?: IntWithAggregatesFilter | number
  }

  export type UserCreateInput = {
    name: string
    email?: string | null
    phone?: number | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tweet?: TweetCreateNestedManyWithoutUserInput
    liked?: LikedCreateNestedManyWithoutUserInput
    retweet?: RetweetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: number
    name: string
    email?: string | null
    phone?: number | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tweet?: TweetUncheckedCreateNestedManyWithoutUserInput
    liked?: LikedUncheckedCreateNestedManyWithoutUserInput
    retweet?: RetweetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: TweetUpdateManyWithoutUserInput
    liked?: LikedUpdateManyWithoutUserInput
    retweet?: RetweetUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: TweetUncheckedUpdateManyWithoutUserInput
    liked?: LikedUncheckedUpdateManyWithoutUserInput
    retweet?: RetweetUncheckedUpdateManyWithoutUserInput
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TweetCreateInput = {
    userId: number
    user?: UserCreateNestedManyWithoutTweetInput
    contents: string
    photo?: string | null
    liked?: LikedCreateNestedManyWithoutTweetInput
    retweet?: RetweetCreateNestedManyWithoutTweetInput
    viewCount?: number
  }

  export type TweetUncheckedCreateInput = {
    id?: number
    userId: number
    user?: UserUncheckedCreateNestedManyWithoutTweetInput
    contents: string
    photo?: string | null
    liked?: LikedUncheckedCreateNestedManyWithoutTweetInput
    retweet?: RetweetUncheckedCreateNestedManyWithoutTweetInput
    viewCount?: number
  }

  export type TweetUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateManyWithoutTweetInput
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    liked?: LikedUpdateManyWithoutTweetInput
    retweet?: RetweetUpdateManyWithoutTweetInput
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type TweetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateManyWithoutTweetInput
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    liked?: LikedUncheckedUpdateManyWithoutTweetInput
    retweet?: RetweetUncheckedUpdateManyWithoutTweetInput
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type TweetUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type TweetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type LikedCreateInput = {
    userId: number
    user?: UserCreateNestedManyWithoutLikedInput
    tweetId: number
    tweet?: TweetCreateNestedManyWithoutLikedInput
  }

  export type LikedUncheckedCreateInput = {
    id?: number
    userId: number
    user?: UserUncheckedCreateNestedManyWithoutLikedInput
    tweetId: number
    tweet?: TweetUncheckedCreateNestedManyWithoutLikedInput
  }

  export type LikedUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateManyWithoutLikedInput
    tweetId?: IntFieldUpdateOperationsInput | number
    tweet?: TweetUpdateManyWithoutLikedInput
  }

  export type LikedUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateManyWithoutLikedInput
    tweetId?: IntFieldUpdateOperationsInput | number
    tweet?: TweetUncheckedUpdateManyWithoutLikedInput
  }

  export type LikedUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type LikedUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type RetweetCreateInput = {
    userId: number
    user?: UserCreateNestedManyWithoutRetweetInput
    tweetId: number
    tweet?: TweetCreateNestedManyWithoutRetweetInput
  }

  export type RetweetUncheckedCreateInput = {
    id?: number
    userId: number
    user?: UserUncheckedCreateNestedManyWithoutRetweetInput
    tweetId: number
    tweet?: TweetUncheckedCreateNestedManyWithoutRetweetInput
  }

  export type RetweetUpdateInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateManyWithoutRetweetInput
    tweetId?: IntFieldUpdateOperationsInput | number
    tweet?: TweetUpdateManyWithoutRetweetInput
  }

  export type RetweetUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateManyWithoutRetweetInput
    tweetId?: IntFieldUpdateOperationsInput | number
    tweet?: TweetUncheckedUpdateManyWithoutRetweetInput
  }

  export type RetweetUpdateManyMutationInput = {
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type RetweetUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type TweetListRelationFilter = {
    every?: TweetWhereInput
    some?: TweetWhereInput
    none?: TweetWhereInput
  }

  export type LikedListRelationFilter = {
    every?: LikedWhereInput
    some?: LikedWhereInput
    none?: LikedWhereInput
  }

  export type RetweetListRelationFilter = {
    every?: RetweetWhereInput
    some?: RetweetWhereInput
    none?: RetweetWhereInput
  }

  export type TweetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type LikedOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type RetweetOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    phone?: SortOrder
    profile?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    id?: SortOrder
    phone?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TweetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    photo?: SortOrder
    viewCount?: SortOrder
  }

  export type TweetAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    viewCount?: SortOrder
  }

  export type TweetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    photo?: SortOrder
    viewCount?: SortOrder
  }

  export type TweetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    contents?: SortOrder
    photo?: SortOrder
    viewCount?: SortOrder
  }

  export type TweetSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    viewCount?: SortOrder
  }

  export type LikedCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type LikedAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type LikedMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type LikedMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type LikedSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type RetweetCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type RetweetAvgOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type RetweetMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type RetweetMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type RetweetSumOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    tweetId?: SortOrder
  }

  export type TweetCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TweetCreateWithoutUserInput>, Enumerable<TweetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutUserInput>
    connect?: Enumerable<TweetWhereUniqueInput>
  }

  export type LikedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LikedCreateWithoutUserInput>, Enumerable<LikedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LikedCreateOrConnectWithoutUserInput>
    connect?: Enumerable<LikedWhereUniqueInput>
  }

  export type RetweetCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RetweetCreateWithoutUserInput>, Enumerable<RetweetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RetweetCreateOrConnectWithoutUserInput>
    connect?: Enumerable<RetweetWhereUniqueInput>
  }

  export type TweetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<TweetCreateWithoutUserInput>, Enumerable<TweetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutUserInput>
    connect?: Enumerable<TweetWhereUniqueInput>
  }

  export type LikedUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<LikedCreateWithoutUserInput>, Enumerable<LikedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LikedCreateOrConnectWithoutUserInput>
    connect?: Enumerable<LikedWhereUniqueInput>
  }

  export type RetweetUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<RetweetCreateWithoutUserInput>, Enumerable<RetweetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RetweetCreateOrConnectWithoutUserInput>
    connect?: Enumerable<RetweetWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type TweetUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TweetCreateWithoutUserInput>, Enumerable<TweetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TweetUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<TweetWhereUniqueInput>
    disconnect?: Enumerable<TweetWhereUniqueInput>
    delete?: Enumerable<TweetWhereUniqueInput>
    connect?: Enumerable<TweetWhereUniqueInput>
    update?: Enumerable<TweetUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TweetUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TweetScalarWhereInput>
  }

  export type LikedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<LikedCreateWithoutUserInput>, Enumerable<LikedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LikedCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LikedUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<LikedWhereUniqueInput>
    disconnect?: Enumerable<LikedWhereUniqueInput>
    delete?: Enumerable<LikedWhereUniqueInput>
    connect?: Enumerable<LikedWhereUniqueInput>
    update?: Enumerable<LikedUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LikedUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LikedScalarWhereInput>
  }

  export type RetweetUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<RetweetCreateWithoutUserInput>, Enumerable<RetweetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RetweetCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RetweetUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<RetweetWhereUniqueInput>
    disconnect?: Enumerable<RetweetWhereUniqueInput>
    delete?: Enumerable<RetweetWhereUniqueInput>
    connect?: Enumerable<RetweetWhereUniqueInput>
    update?: Enumerable<RetweetUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RetweetUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RetweetScalarWhereInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TweetUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<TweetCreateWithoutUserInput>, Enumerable<TweetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<TweetUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<TweetWhereUniqueInput>
    disconnect?: Enumerable<TweetWhereUniqueInput>
    delete?: Enumerable<TweetWhereUniqueInput>
    connect?: Enumerable<TweetWhereUniqueInput>
    update?: Enumerable<TweetUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<TweetUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<TweetScalarWhereInput>
  }

  export type LikedUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<LikedCreateWithoutUserInput>, Enumerable<LikedUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<LikedCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<LikedUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<LikedWhereUniqueInput>
    disconnect?: Enumerable<LikedWhereUniqueInput>
    delete?: Enumerable<LikedWhereUniqueInput>
    connect?: Enumerable<LikedWhereUniqueInput>
    update?: Enumerable<LikedUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<LikedUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<LikedScalarWhereInput>
  }

  export type RetweetUncheckedUpdateManyWithoutUserInput = {
    create?: XOR<Enumerable<RetweetCreateWithoutUserInput>, Enumerable<RetweetUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<RetweetCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<RetweetUpsertWithWhereUniqueWithoutUserInput>
    set?: Enumerable<RetweetWhereUniqueInput>
    disconnect?: Enumerable<RetweetWhereUniqueInput>
    delete?: Enumerable<RetweetWhereUniqueInput>
    connect?: Enumerable<RetweetWhereUniqueInput>
    update?: Enumerable<RetweetUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<RetweetUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<RetweetScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutTweetInput = {
    create?: XOR<Enumerable<UserCreateWithoutTweetInput>, Enumerable<UserUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTweetInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type LikedCreateNestedManyWithoutTweetInput = {
    create?: XOR<Enumerable<LikedCreateWithoutTweetInput>, Enumerable<LikedUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<LikedCreateOrConnectWithoutTweetInput>
    connect?: Enumerable<LikedWhereUniqueInput>
  }

  export type RetweetCreateNestedManyWithoutTweetInput = {
    create?: XOR<Enumerable<RetweetCreateWithoutTweetInput>, Enumerable<RetweetUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<RetweetCreateOrConnectWithoutTweetInput>
    connect?: Enumerable<RetweetWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutTweetInput = {
    create?: XOR<Enumerable<UserCreateWithoutTweetInput>, Enumerable<UserUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTweetInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type LikedUncheckedCreateNestedManyWithoutTweetInput = {
    create?: XOR<Enumerable<LikedCreateWithoutTweetInput>, Enumerable<LikedUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<LikedCreateOrConnectWithoutTweetInput>
    connect?: Enumerable<LikedWhereUniqueInput>
  }

  export type RetweetUncheckedCreateNestedManyWithoutTweetInput = {
    create?: XOR<Enumerable<RetweetCreateWithoutTweetInput>, Enumerable<RetweetUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<RetweetCreateOrConnectWithoutTweetInput>
    connect?: Enumerable<RetweetWhereUniqueInput>
  }

  export type UserUpdateManyWithoutTweetInput = {
    create?: XOR<Enumerable<UserCreateWithoutTweetInput>, Enumerable<UserUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTweetInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTweetInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTweetInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTweetInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type LikedUpdateManyWithoutTweetInput = {
    create?: XOR<Enumerable<LikedCreateWithoutTweetInput>, Enumerable<LikedUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<LikedCreateOrConnectWithoutTweetInput>
    upsert?: Enumerable<LikedUpsertWithWhereUniqueWithoutTweetInput>
    set?: Enumerable<LikedWhereUniqueInput>
    disconnect?: Enumerable<LikedWhereUniqueInput>
    delete?: Enumerable<LikedWhereUniqueInput>
    connect?: Enumerable<LikedWhereUniqueInput>
    update?: Enumerable<LikedUpdateWithWhereUniqueWithoutTweetInput>
    updateMany?: Enumerable<LikedUpdateManyWithWhereWithoutTweetInput>
    deleteMany?: Enumerable<LikedScalarWhereInput>
  }

  export type RetweetUpdateManyWithoutTweetInput = {
    create?: XOR<Enumerable<RetweetCreateWithoutTweetInput>, Enumerable<RetweetUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<RetweetCreateOrConnectWithoutTweetInput>
    upsert?: Enumerable<RetweetUpsertWithWhereUniqueWithoutTweetInput>
    set?: Enumerable<RetweetWhereUniqueInput>
    disconnect?: Enumerable<RetweetWhereUniqueInput>
    delete?: Enumerable<RetweetWhereUniqueInput>
    connect?: Enumerable<RetweetWhereUniqueInput>
    update?: Enumerable<RetweetUpdateWithWhereUniqueWithoutTweetInput>
    updateMany?: Enumerable<RetweetUpdateManyWithWhereWithoutTweetInput>
    deleteMany?: Enumerable<RetweetScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutTweetInput = {
    create?: XOR<Enumerable<UserCreateWithoutTweetInput>, Enumerable<UserUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutTweetInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutTweetInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutTweetInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutTweetInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type LikedUncheckedUpdateManyWithoutTweetInput = {
    create?: XOR<Enumerable<LikedCreateWithoutTweetInput>, Enumerable<LikedUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<LikedCreateOrConnectWithoutTweetInput>
    upsert?: Enumerable<LikedUpsertWithWhereUniqueWithoutTweetInput>
    set?: Enumerable<LikedWhereUniqueInput>
    disconnect?: Enumerable<LikedWhereUniqueInput>
    delete?: Enumerable<LikedWhereUniqueInput>
    connect?: Enumerable<LikedWhereUniqueInput>
    update?: Enumerable<LikedUpdateWithWhereUniqueWithoutTweetInput>
    updateMany?: Enumerable<LikedUpdateManyWithWhereWithoutTweetInput>
    deleteMany?: Enumerable<LikedScalarWhereInput>
  }

  export type RetweetUncheckedUpdateManyWithoutTweetInput = {
    create?: XOR<Enumerable<RetweetCreateWithoutTweetInput>, Enumerable<RetweetUncheckedCreateWithoutTweetInput>>
    connectOrCreate?: Enumerable<RetweetCreateOrConnectWithoutTweetInput>
    upsert?: Enumerable<RetweetUpsertWithWhereUniqueWithoutTweetInput>
    set?: Enumerable<RetweetWhereUniqueInput>
    disconnect?: Enumerable<RetweetWhereUniqueInput>
    delete?: Enumerable<RetweetWhereUniqueInput>
    connect?: Enumerable<RetweetWhereUniqueInput>
    update?: Enumerable<RetweetUpdateWithWhereUniqueWithoutTweetInput>
    updateMany?: Enumerable<RetweetUpdateManyWithWhereWithoutTweetInput>
    deleteMany?: Enumerable<RetweetScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutLikedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedInput>, Enumerable<UserUncheckedCreateWithoutLikedInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TweetCreateNestedManyWithoutLikedInput = {
    create?: XOR<Enumerable<TweetCreateWithoutLikedInput>, Enumerable<TweetUncheckedCreateWithoutLikedInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutLikedInput>
    connect?: Enumerable<TweetWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutLikedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedInput>, Enumerable<UserUncheckedCreateWithoutLikedInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TweetUncheckedCreateNestedManyWithoutLikedInput = {
    create?: XOR<Enumerable<TweetCreateWithoutLikedInput>, Enumerable<TweetUncheckedCreateWithoutLikedInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutLikedInput>
    connect?: Enumerable<TweetWhereUniqueInput>
  }

  export type UserUpdateManyWithoutLikedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedInput>, Enumerable<UserUncheckedCreateWithoutLikedInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutLikedInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutLikedInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutLikedInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TweetUpdateManyWithoutLikedInput = {
    create?: XOR<Enumerable<TweetCreateWithoutLikedInput>, Enumerable<TweetUncheckedCreateWithoutLikedInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutLikedInput>
    upsert?: Enumerable<TweetUpsertWithWhereUniqueWithoutLikedInput>
    set?: Enumerable<TweetWhereUniqueInput>
    disconnect?: Enumerable<TweetWhereUniqueInput>
    delete?: Enumerable<TweetWhereUniqueInput>
    connect?: Enumerable<TweetWhereUniqueInput>
    update?: Enumerable<TweetUpdateWithWhereUniqueWithoutLikedInput>
    updateMany?: Enumerable<TweetUpdateManyWithWhereWithoutLikedInput>
    deleteMany?: Enumerable<TweetScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutLikedInput = {
    create?: XOR<Enumerable<UserCreateWithoutLikedInput>, Enumerable<UserUncheckedCreateWithoutLikedInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutLikedInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutLikedInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutLikedInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutLikedInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TweetUncheckedUpdateManyWithoutLikedInput = {
    create?: XOR<Enumerable<TweetCreateWithoutLikedInput>, Enumerable<TweetUncheckedCreateWithoutLikedInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutLikedInput>
    upsert?: Enumerable<TweetUpsertWithWhereUniqueWithoutLikedInput>
    set?: Enumerable<TweetWhereUniqueInput>
    disconnect?: Enumerable<TweetWhereUniqueInput>
    delete?: Enumerable<TweetWhereUniqueInput>
    connect?: Enumerable<TweetWhereUniqueInput>
    update?: Enumerable<TweetUpdateWithWhereUniqueWithoutLikedInput>
    updateMany?: Enumerable<TweetUpdateManyWithWhereWithoutLikedInput>
    deleteMany?: Enumerable<TweetScalarWhereInput>
  }

  export type UserCreateNestedManyWithoutRetweetInput = {
    create?: XOR<Enumerable<UserCreateWithoutRetweetInput>, Enumerable<UserUncheckedCreateWithoutRetweetInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRetweetInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TweetCreateNestedManyWithoutRetweetInput = {
    create?: XOR<Enumerable<TweetCreateWithoutRetweetInput>, Enumerable<TweetUncheckedCreateWithoutRetweetInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutRetweetInput>
    connect?: Enumerable<TweetWhereUniqueInput>
  }

  export type UserUncheckedCreateNestedManyWithoutRetweetInput = {
    create?: XOR<Enumerable<UserCreateWithoutRetweetInput>, Enumerable<UserUncheckedCreateWithoutRetweetInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRetweetInput>
    connect?: Enumerable<UserWhereUniqueInput>
  }

  export type TweetUncheckedCreateNestedManyWithoutRetweetInput = {
    create?: XOR<Enumerable<TweetCreateWithoutRetweetInput>, Enumerable<TweetUncheckedCreateWithoutRetweetInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutRetweetInput>
    connect?: Enumerable<TweetWhereUniqueInput>
  }

  export type UserUpdateManyWithoutRetweetInput = {
    create?: XOR<Enumerable<UserCreateWithoutRetweetInput>, Enumerable<UserUncheckedCreateWithoutRetweetInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRetweetInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRetweetInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRetweetInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRetweetInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TweetUpdateManyWithoutRetweetInput = {
    create?: XOR<Enumerable<TweetCreateWithoutRetweetInput>, Enumerable<TweetUncheckedCreateWithoutRetweetInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutRetweetInput>
    upsert?: Enumerable<TweetUpsertWithWhereUniqueWithoutRetweetInput>
    set?: Enumerable<TweetWhereUniqueInput>
    disconnect?: Enumerable<TweetWhereUniqueInput>
    delete?: Enumerable<TweetWhereUniqueInput>
    connect?: Enumerable<TweetWhereUniqueInput>
    update?: Enumerable<TweetUpdateWithWhereUniqueWithoutRetweetInput>
    updateMany?: Enumerable<TweetUpdateManyWithWhereWithoutRetweetInput>
    deleteMany?: Enumerable<TweetScalarWhereInput>
  }

  export type UserUncheckedUpdateManyWithoutRetweetInput = {
    create?: XOR<Enumerable<UserCreateWithoutRetweetInput>, Enumerable<UserUncheckedCreateWithoutRetweetInput>>
    connectOrCreate?: Enumerable<UserCreateOrConnectWithoutRetweetInput>
    upsert?: Enumerable<UserUpsertWithWhereUniqueWithoutRetweetInput>
    set?: Enumerable<UserWhereUniqueInput>
    disconnect?: Enumerable<UserWhereUniqueInput>
    delete?: Enumerable<UserWhereUniqueInput>
    connect?: Enumerable<UserWhereUniqueInput>
    update?: Enumerable<UserUpdateWithWhereUniqueWithoutRetweetInput>
    updateMany?: Enumerable<UserUpdateManyWithWhereWithoutRetweetInput>
    deleteMany?: Enumerable<UserScalarWhereInput>
  }

  export type TweetUncheckedUpdateManyWithoutRetweetInput = {
    create?: XOR<Enumerable<TweetCreateWithoutRetweetInput>, Enumerable<TweetUncheckedCreateWithoutRetweetInput>>
    connectOrCreate?: Enumerable<TweetCreateOrConnectWithoutRetweetInput>
    upsert?: Enumerable<TweetUpsertWithWhereUniqueWithoutRetweetInput>
    set?: Enumerable<TweetWhereUniqueInput>
    disconnect?: Enumerable<TweetWhereUniqueInput>
    delete?: Enumerable<TweetWhereUniqueInput>
    connect?: Enumerable<TweetWhereUniqueInput>
    update?: Enumerable<TweetUpdateWithWhereUniqueWithoutRetweetInput>
    updateMany?: Enumerable<TweetUpdateManyWithWhereWithoutRetweetInput>
    deleteMany?: Enumerable<TweetScalarWhereInput>
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number>
    notIn?: Enumerable<number>
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string>
    notIn?: Enumerable<string>
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | null
    notIn?: Enumerable<string> | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | null
    notIn?: Enumerable<number> | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string>
    notIn?: Enumerable<Date> | Enumerable<string>
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type TweetCreateWithoutUserInput = {
    userId: number
    contents: string
    photo?: string | null
    liked?: LikedCreateNestedManyWithoutTweetInput
    retweet?: RetweetCreateNestedManyWithoutTweetInput
    viewCount?: number
  }

  export type TweetUncheckedCreateWithoutUserInput = {
    id?: number
    userId: number
    contents: string
    photo?: string | null
    liked?: LikedUncheckedCreateNestedManyWithoutTweetInput
    retweet?: RetweetUncheckedCreateNestedManyWithoutTweetInput
    viewCount?: number
  }

  export type TweetCreateOrConnectWithoutUserInput = {
    where: TweetWhereUniqueInput
    create: XOR<TweetCreateWithoutUserInput, TweetUncheckedCreateWithoutUserInput>
  }

  export type LikedCreateWithoutUserInput = {
    userId: number
    tweetId: number
    tweet?: TweetCreateNestedManyWithoutLikedInput
  }

  export type LikedUncheckedCreateWithoutUserInput = {
    id?: number
    userId: number
    tweetId: number
    tweet?: TweetUncheckedCreateNestedManyWithoutLikedInput
  }

  export type LikedCreateOrConnectWithoutUserInput = {
    where: LikedWhereUniqueInput
    create: XOR<LikedCreateWithoutUserInput, LikedUncheckedCreateWithoutUserInput>
  }

  export type RetweetCreateWithoutUserInput = {
    userId: number
    tweetId: number
    tweet?: TweetCreateNestedManyWithoutRetweetInput
  }

  export type RetweetUncheckedCreateWithoutUserInput = {
    id?: number
    userId: number
    tweetId: number
    tweet?: TweetUncheckedCreateNestedManyWithoutRetweetInput
  }

  export type RetweetCreateOrConnectWithoutUserInput = {
    where: RetweetWhereUniqueInput
    create: XOR<RetweetCreateWithoutUserInput, RetweetUncheckedCreateWithoutUserInput>
  }

  export type TweetUpsertWithWhereUniqueWithoutUserInput = {
    where: TweetWhereUniqueInput
    update: XOR<TweetUpdateWithoutUserInput, TweetUncheckedUpdateWithoutUserInput>
    create: XOR<TweetCreateWithoutUserInput, TweetUncheckedCreateWithoutUserInput>
  }

  export type TweetUpdateWithWhereUniqueWithoutUserInput = {
    where: TweetWhereUniqueInput
    data: XOR<TweetUpdateWithoutUserInput, TweetUncheckedUpdateWithoutUserInput>
  }

  export type TweetUpdateManyWithWhereWithoutUserInput = {
    where: TweetScalarWhereInput
    data: XOR<TweetUpdateManyMutationInput, TweetUncheckedUpdateManyWithoutTweetInput>
  }

  export type TweetScalarWhereInput = {
    AND?: Enumerable<TweetScalarWhereInput>
    OR?: Enumerable<TweetScalarWhereInput>
    NOT?: Enumerable<TweetScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    contents?: StringFilter | string
    photo?: StringNullableFilter | string | null
    viewCount?: IntFilter | number
  }

  export type LikedUpsertWithWhereUniqueWithoutUserInput = {
    where: LikedWhereUniqueInput
    update: XOR<LikedUpdateWithoutUserInput, LikedUncheckedUpdateWithoutUserInput>
    create: XOR<LikedCreateWithoutUserInput, LikedUncheckedCreateWithoutUserInput>
  }

  export type LikedUpdateWithWhereUniqueWithoutUserInput = {
    where: LikedWhereUniqueInput
    data: XOR<LikedUpdateWithoutUserInput, LikedUncheckedUpdateWithoutUserInput>
  }

  export type LikedUpdateManyWithWhereWithoutUserInput = {
    where: LikedScalarWhereInput
    data: XOR<LikedUpdateManyMutationInput, LikedUncheckedUpdateManyWithoutLikedInput>
  }

  export type LikedScalarWhereInput = {
    AND?: Enumerable<LikedScalarWhereInput>
    OR?: Enumerable<LikedScalarWhereInput>
    NOT?: Enumerable<LikedScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    tweetId?: IntFilter | number
  }

  export type RetweetUpsertWithWhereUniqueWithoutUserInput = {
    where: RetweetWhereUniqueInput
    update: XOR<RetweetUpdateWithoutUserInput, RetweetUncheckedUpdateWithoutUserInput>
    create: XOR<RetweetCreateWithoutUserInput, RetweetUncheckedCreateWithoutUserInput>
  }

  export type RetweetUpdateWithWhereUniqueWithoutUserInput = {
    where: RetweetWhereUniqueInput
    data: XOR<RetweetUpdateWithoutUserInput, RetweetUncheckedUpdateWithoutUserInput>
  }

  export type RetweetUpdateManyWithWhereWithoutUserInput = {
    where: RetweetScalarWhereInput
    data: XOR<RetweetUpdateManyMutationInput, RetweetUncheckedUpdateManyWithoutRetweetInput>
  }

  export type RetweetScalarWhereInput = {
    AND?: Enumerable<RetweetScalarWhereInput>
    OR?: Enumerable<RetweetScalarWhereInput>
    NOT?: Enumerable<RetweetScalarWhereInput>
    id?: IntFilter | number
    userId?: IntFilter | number
    tweetId?: IntFilter | number
  }

  export type UserCreateWithoutTweetInput = {
    name: string
    email?: string | null
    phone?: number | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    liked?: LikedCreateNestedManyWithoutUserInput
    retweet?: RetweetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTweetInput = {
    id?: number
    name: string
    email?: string | null
    phone?: number | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    liked?: LikedUncheckedCreateNestedManyWithoutUserInput
    retweet?: RetweetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTweetInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTweetInput, UserUncheckedCreateWithoutTweetInput>
  }

  export type LikedCreateWithoutTweetInput = {
    userId: number
    user?: UserCreateNestedManyWithoutLikedInput
    tweetId: number
  }

  export type LikedUncheckedCreateWithoutTweetInput = {
    id?: number
    userId: number
    user?: UserUncheckedCreateNestedManyWithoutLikedInput
    tweetId: number
  }

  export type LikedCreateOrConnectWithoutTweetInput = {
    where: LikedWhereUniqueInput
    create: XOR<LikedCreateWithoutTweetInput, LikedUncheckedCreateWithoutTweetInput>
  }

  export type RetweetCreateWithoutTweetInput = {
    userId: number
    user?: UserCreateNestedManyWithoutRetweetInput
    tweetId: number
  }

  export type RetweetUncheckedCreateWithoutTweetInput = {
    id?: number
    userId: number
    user?: UserUncheckedCreateNestedManyWithoutRetweetInput
    tweetId: number
  }

  export type RetweetCreateOrConnectWithoutTweetInput = {
    where: RetweetWhereUniqueInput
    create: XOR<RetweetCreateWithoutTweetInput, RetweetUncheckedCreateWithoutTweetInput>
  }

  export type UserUpsertWithWhereUniqueWithoutTweetInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutTweetInput, UserUncheckedUpdateWithoutTweetInput>
    create: XOR<UserCreateWithoutTweetInput, UserUncheckedCreateWithoutTweetInput>
  }

  export type UserUpdateWithWhereUniqueWithoutTweetInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutTweetInput, UserUncheckedUpdateWithoutTweetInput>
  }

  export type UserUpdateManyWithWhereWithoutTweetInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type UserScalarWhereInput = {
    AND?: Enumerable<UserScalarWhereInput>
    OR?: Enumerable<UserScalarWhereInput>
    NOT?: Enumerable<UserScalarWhereInput>
    id?: IntFilter | number
    name?: StringFilter | string
    email?: StringNullableFilter | string | null
    phone?: IntNullableFilter | number | null
    profile?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
  }

  export type LikedUpsertWithWhereUniqueWithoutTweetInput = {
    where: LikedWhereUniqueInput
    update: XOR<LikedUpdateWithoutTweetInput, LikedUncheckedUpdateWithoutTweetInput>
    create: XOR<LikedCreateWithoutTweetInput, LikedUncheckedCreateWithoutTweetInput>
  }

  export type LikedUpdateWithWhereUniqueWithoutTweetInput = {
    where: LikedWhereUniqueInput
    data: XOR<LikedUpdateWithoutTweetInput, LikedUncheckedUpdateWithoutTweetInput>
  }

  export type LikedUpdateManyWithWhereWithoutTweetInput = {
    where: LikedScalarWhereInput
    data: XOR<LikedUpdateManyMutationInput, LikedUncheckedUpdateManyWithoutLikedInput>
  }

  export type RetweetUpsertWithWhereUniqueWithoutTweetInput = {
    where: RetweetWhereUniqueInput
    update: XOR<RetweetUpdateWithoutTweetInput, RetweetUncheckedUpdateWithoutTweetInput>
    create: XOR<RetweetCreateWithoutTweetInput, RetweetUncheckedCreateWithoutTweetInput>
  }

  export type RetweetUpdateWithWhereUniqueWithoutTweetInput = {
    where: RetweetWhereUniqueInput
    data: XOR<RetweetUpdateWithoutTweetInput, RetweetUncheckedUpdateWithoutTweetInput>
  }

  export type RetweetUpdateManyWithWhereWithoutTweetInput = {
    where: RetweetScalarWhereInput
    data: XOR<RetweetUpdateManyMutationInput, RetweetUncheckedUpdateManyWithoutRetweetInput>
  }

  export type UserCreateWithoutLikedInput = {
    name: string
    email?: string | null
    phone?: number | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tweet?: TweetCreateNestedManyWithoutUserInput
    retweet?: RetweetCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikedInput = {
    id?: number
    name: string
    email?: string | null
    phone?: number | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tweet?: TweetUncheckedCreateNestedManyWithoutUserInput
    retweet?: RetweetUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikedInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedInput, UserUncheckedCreateWithoutLikedInput>
  }

  export type TweetCreateWithoutLikedInput = {
    userId: number
    user?: UserCreateNestedManyWithoutTweetInput
    contents: string
    photo?: string | null
    retweet?: RetweetCreateNestedManyWithoutTweetInput
    viewCount?: number
  }

  export type TweetUncheckedCreateWithoutLikedInput = {
    id?: number
    userId: number
    user?: UserUncheckedCreateNestedManyWithoutTweetInput
    contents: string
    photo?: string | null
    retweet?: RetweetUncheckedCreateNestedManyWithoutTweetInput
    viewCount?: number
  }

  export type TweetCreateOrConnectWithoutLikedInput = {
    where: TweetWhereUniqueInput
    create: XOR<TweetCreateWithoutLikedInput, TweetUncheckedCreateWithoutLikedInput>
  }

  export type UserUpsertWithWhereUniqueWithoutLikedInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutLikedInput, UserUncheckedUpdateWithoutLikedInput>
    create: XOR<UserCreateWithoutLikedInput, UserUncheckedCreateWithoutLikedInput>
  }

  export type UserUpdateWithWhereUniqueWithoutLikedInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutLikedInput, UserUncheckedUpdateWithoutLikedInput>
  }

  export type UserUpdateManyWithWhereWithoutLikedInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type TweetUpsertWithWhereUniqueWithoutLikedInput = {
    where: TweetWhereUniqueInput
    update: XOR<TweetUpdateWithoutLikedInput, TweetUncheckedUpdateWithoutLikedInput>
    create: XOR<TweetCreateWithoutLikedInput, TweetUncheckedCreateWithoutLikedInput>
  }

  export type TweetUpdateWithWhereUniqueWithoutLikedInput = {
    where: TweetWhereUniqueInput
    data: XOR<TweetUpdateWithoutLikedInput, TweetUncheckedUpdateWithoutLikedInput>
  }

  export type TweetUpdateManyWithWhereWithoutLikedInput = {
    where: TweetScalarWhereInput
    data: XOR<TweetUpdateManyMutationInput, TweetUncheckedUpdateManyWithoutTweetInput>
  }

  export type UserCreateWithoutRetweetInput = {
    name: string
    email?: string | null
    phone?: number | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tweet?: TweetCreateNestedManyWithoutUserInput
    liked?: LikedCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutRetweetInput = {
    id?: number
    name: string
    email?: string | null
    phone?: number | null
    profile?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    tweet?: TweetUncheckedCreateNestedManyWithoutUserInput
    liked?: LikedUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutRetweetInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRetweetInput, UserUncheckedCreateWithoutRetweetInput>
  }

  export type TweetCreateWithoutRetweetInput = {
    userId: number
    user?: UserCreateNestedManyWithoutTweetInput
    contents: string
    photo?: string | null
    liked?: LikedCreateNestedManyWithoutTweetInput
    viewCount?: number
  }

  export type TweetUncheckedCreateWithoutRetweetInput = {
    id?: number
    userId: number
    user?: UserUncheckedCreateNestedManyWithoutTweetInput
    contents: string
    photo?: string | null
    liked?: LikedUncheckedCreateNestedManyWithoutTweetInput
    viewCount?: number
  }

  export type TweetCreateOrConnectWithoutRetweetInput = {
    where: TweetWhereUniqueInput
    create: XOR<TweetCreateWithoutRetweetInput, TweetUncheckedCreateWithoutRetweetInput>
  }

  export type UserUpsertWithWhereUniqueWithoutRetweetInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRetweetInput, UserUncheckedUpdateWithoutRetweetInput>
    create: XOR<UserCreateWithoutRetweetInput, UserUncheckedCreateWithoutRetweetInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRetweetInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRetweetInput, UserUncheckedUpdateWithoutRetweetInput>
  }

  export type UserUpdateManyWithWhereWithoutRetweetInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutUserInput>
  }

  export type TweetUpsertWithWhereUniqueWithoutRetweetInput = {
    where: TweetWhereUniqueInput
    update: XOR<TweetUpdateWithoutRetweetInput, TweetUncheckedUpdateWithoutRetweetInput>
    create: XOR<TweetCreateWithoutRetweetInput, TweetUncheckedCreateWithoutRetweetInput>
  }

  export type TweetUpdateWithWhereUniqueWithoutRetweetInput = {
    where: TweetWhereUniqueInput
    data: XOR<TweetUpdateWithoutRetweetInput, TweetUncheckedUpdateWithoutRetweetInput>
  }

  export type TweetUpdateManyWithWhereWithoutRetweetInput = {
    where: TweetScalarWhereInput
    data: XOR<TweetUpdateManyMutationInput, TweetUncheckedUpdateManyWithoutTweetInput>
  }

  export type TweetUpdateWithoutUserInput = {
    userId?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    liked?: LikedUpdateManyWithoutTweetInput
    retweet?: RetweetUpdateManyWithoutTweetInput
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type TweetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    liked?: LikedUncheckedUpdateManyWithoutTweetInput
    retweet?: RetweetUncheckedUpdateManyWithoutTweetInput
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type TweetUncheckedUpdateManyWithoutTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type LikedUpdateWithoutUserInput = {
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
    tweet?: TweetUpdateManyWithoutLikedInput
  }

  export type LikedUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
    tweet?: TweetUncheckedUpdateManyWithoutLikedInput
  }

  export type LikedUncheckedUpdateManyWithoutLikedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type RetweetUpdateWithoutUserInput = {
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
    tweet?: TweetUpdateManyWithoutRetweetInput
  }

  export type RetweetUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
    tweet?: TweetUncheckedUpdateManyWithoutRetweetInput
  }

  export type RetweetUncheckedUpdateManyWithoutRetweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutTweetInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: LikedUpdateManyWithoutUserInput
    retweet?: RetweetUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    liked?: LikedUncheckedUpdateManyWithoutUserInput
    retweet?: RetweetUncheckedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type LikedUpdateWithoutTweetInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateManyWithoutLikedInput
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type LikedUncheckedUpdateWithoutTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateManyWithoutLikedInput
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type RetweetUpdateWithoutTweetInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateManyWithoutRetweetInput
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type RetweetUncheckedUpdateWithoutTweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateManyWithoutRetweetInput
    tweetId?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutLikedInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: TweetUpdateManyWithoutUserInput
    retweet?: RetweetUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutLikedInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: TweetUncheckedUpdateManyWithoutUserInput
    retweet?: RetweetUncheckedUpdateManyWithoutUserInput
  }

  export type TweetUpdateWithoutLikedInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateManyWithoutTweetInput
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    retweet?: RetweetUpdateManyWithoutTweetInput
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type TweetUncheckedUpdateWithoutLikedInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateManyWithoutTweetInput
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    retweet?: RetweetUncheckedUpdateManyWithoutTweetInput
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type UserUpdateWithoutRetweetInput = {
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: TweetUpdateManyWithoutUserInput
    liked?: LikedUpdateManyWithoutUserInput
  }

  export type UserUncheckedUpdateWithoutRetweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    email?: NullableStringFieldUpdateOperationsInput | string | null
    phone?: NullableIntFieldUpdateOperationsInput | number | null
    profile?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    tweet?: TweetUncheckedUpdateManyWithoutUserInput
    liked?: LikedUncheckedUpdateManyWithoutUserInput
  }

  export type TweetUpdateWithoutRetweetInput = {
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateManyWithoutTweetInput
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    liked?: LikedUpdateManyWithoutTweetInput
    viewCount?: IntFieldUpdateOperationsInput | number
  }

  export type TweetUncheckedUpdateWithoutRetweetInput = {
    id?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    user?: UserUncheckedUpdateManyWithoutTweetInput
    contents?: StringFieldUpdateOperationsInput | string
    photo?: NullableStringFieldUpdateOperationsInput | string | null
    liked?: LikedUncheckedUpdateManyWithoutTweetInput
    viewCount?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.DMMF.Document;
}